setwd("C:/Users/revel/Desktop/R package")
setwd("C:/Users/revel/Desktop/R package")
setwd("C:/Users/revel/Desktop/R package/STRAW/R")
straw<-function(pv, pis, ks.vec, q)
{
# the input
# pv: the p-values
# pis: conditional probabilities
# q: the FDR level
# ks.vec: vector of weight
# the output
# nr: the number of hypothesis to be rejected
# th: the shifted p-value threshold
# de: the decision rule
#### shifted p_value
m<-length(pv)
j_new<-0
est_ks<-1
p_adapted_new<-rep(0,m)
ranked_p_adapted_new<-rep(0,m)
if (missing(ks.vec))
ks.vec=seq(0.5,5,0.25)
for (ks in ks.vec)
{
p_adapted<-pv*((1-pis)/pis)^(1/ks)
ranked_p_adapted<-p_adapted[order(p_adapted)]
ranking<-order(p_adapted)
for(j in m:1)
{
c_star<-ranked_p_adapted[j]*(pis[ranking]/(1-pis[ranking]))^(1/ks)
FDP_value<-sum(c_star*(1-pis[ranking]),na.rm=TRUE)/j
if(FDP_value<q)
break
}
if (j>j_new)
{
j_new<-j
est_ks<-ks
p_adapted_new<-p_adapted
ranked_p_adapted_new<-ranked_p_adapted
}
}
th<-ranked_p_adapted_new[j_new]
pv.adapted.de<-rep(0, m)
pv.adapted.de[which(p_adapted_new<th)]<-1
nr<-sum(pv.adapted.de)
return(list(th=th, nr=nr, de=pv.adapted.de, est_ks=est_ks))
}
m<-5000 # the number of hypotheses
mu0.vec<-seq(from=2, to=4, by=0.25)
np<-length(mu0.vec)
pis<-rep(0.01, m)
pis[1001:1200]<-0.4
pis[2001:2200]<-0.4
pis[3001:3200]<-0.2
pis[4001:4200]<-0.2
q<-0.1  # the FDR level
nrep<-100
theta<-rbinom(m, size=1, prob=pis)
pii<-sum(theta)/m
x0<-rnorm(m, mean=0, sd=1)
x1<-rnorm(m, mean=mu0, sd=1)
x<-(1-theta)*x0+theta*x1
pv<-2*pnorm(-abs(x), 0, 1)
m<-5000 # the number of hypotheses
mu0.vec<-seq(from=2, to=4, by=0.25)
np<-length(mu0.vec)
pis<-rep(0.01, m)
pis[1001:1200]<-0.4
pis[2001:2200]<-0.4
pis[3001:3200]<-0.2
pis[4001:4200]<-0.2
q<-0.1  # the FDR level
nrep<-100
mu0<-mu0.vec[1]
theta<-rbinom(m, size=1, prob=pis)
pii<-sum(theta)/m
x0<-rnorm(m, mean=0, sd=1)
x1<-rnorm(m, mean=mu0, sd=1)
x<-(1-theta)*x0+theta*x1
pv<-2*pnorm(-abs(x), 0, 1)
straw.res<-straw(pvs=pv, pis, 1/2, q)
straw.res<-straw(pv=pv, pis, 1/2, q)
pis_1D.func<-function(x,h) {
#x: the statistic vector
#h: the bandwidth of kernel functions
#pis.hat: local sparsity level
require(locfdr)
m <- length(pv)
Lfdr<-locfdr(x, bre = 120, df = 7, pct = 0, pct0 = 1/4, nulltype = 0,
type =0, plot = 0, main = " ", sw = 0)$fdr
pis.hat<-rep(0, m)
s <- 1:m # auxiliary variable
for (t in 1:m)
{
dis.vec<-abs(s-t)
kht<-dnorm(dis.vec, 0, h)
kht[which(abs(s-t)>h)]<-0
pis.hat[t]<-sum(kht*(1-Lfdr))/sum(kht)
}
pis.hat
}
bh.func<-function(pv, q)
{
# the input
# pv: the p-values
# q: the FDR level
# the output
# nr: the number of hypothesis to be rejected
# th: the p-value threshold
# de: the decision rule
m=length(pv)
st.pv<-sort(pv)
pvi<-st.pv/1:m
de<-rep(0, m)
if (sum(pvi<=q/m)==0)
{
k<-0
pk<-1
}
else
{
k<-max(which(pvi<=(q/m)))
pk<-st.pv[k]
de[which(pv<=pk)]<-1
}
y<-list(nr=k, th=pk, de=de)
return (y)
}
m<-5000 # the number of hypotheses
mu0.vec<-seq(from=2, to=4, by=0.25)
np<-length(mu0.vec)
pis<-rep(0.01, m)
pis[1001:1200]<-0.4
pis[2001:2200]<-0.4
pis[3001:3200]<-0.2
pis[4001:4200]<-0.2
q<-0.1  # the FDR level
nrep<-100
mu0<-mu0.vec[1]
theta<-rbinom(m, size=1, prob=pis)
pii<-sum(theta)/m
x0<-rnorm(m, mean=0, sd=1)
x1<-rnorm(m, mean=mu0, sd=1)
x<-(1-theta)*x0+theta*x1
pv<-2*pnorm(-abs(x), 0, 1)
pis.hat<-pis_1Dfunc(x=x,  h=50)
pis_1D.func<-function(x,h) {
#x: the statistic vector
#h: the bandwidth of kernel functions
#pis.hat: local sparsity level
require(locfdr)
m <- length(pv)
Lfdr<-locfdr(x, bre = 120, df = 7, pct = 0, pct0 = 1/4, nulltype = 0,
type =0, plot = 0, main = " ", sw = 0)$fdr
pis.hat<-rep(0, m)
s <- 1:m # auxiliary variable
for (t in 1:m)
{
dis.vec<-abs(s-t)
kht<-dnorm(dis.vec, 0, h)
kht[which(abs(s-t)>h)]<-0
pis.hat[t]<-sum(kht*(1-Lfdr))/sum(kht)
}
pis.hat
}
pis_1Dfunc<-function(x,h) {
#x: the statistic vector
#h: the bandwidth of kernel functions
#pis.hat: local sparsity level
require(locfdr)
m <- length(pv)
Lfdr<-locfdr(x, bre = 120, df = 7, pct = 0, pct0 = 1/4, nulltype = 0,
type =0, plot = 0, main = " ", sw = 0)$fdr
pis.hat<-rep(0, m)
s <- 1:m # auxiliary variable
for (t in 1:m)
{
dis.vec<-abs(s-t)
kht<-dnorm(dis.vec, 0, h)
kht[which(abs(s-t)>h)]<-0
pis.hat[t]<-sum(kht*(1-Lfdr))/sum(kht)
}
pis.hat
}
pis.hat<-pis_1Dfunc(x=x,  h=50)
library(locfdr)
pis.hat<-pis_1Dfunc(x=x,  h=50)
disvec_2Dfunc<-function(dims, s)
{
# disvec computes the distances of all points on a m1 times m2 spatial domain to a point s
## Arguments:
# dims=c(d1, d2): the dimensions
# s=c(s1, s2): a spatial point
## Values:
# a vector of distances
m<-dims[1]*dims[2]
dis.vec<-rep(0, m)
for(i in 1:dims[1])
{
dis.vec[((i-1)*dims[2]+1):(i*dims[2])]<-sqrt((i-s[1])^2+(1:dims[2]-s[2])^2)
}
return(dis.vec)
}
pis_2Dfunc<-function(x.2D,h) {
#x: the statistic matrix
#h: the bandwidth of kernel functions
#pis.hat: local sparsity level
require(locfdr)
dims<-dim(x.2D)
m<-dims[1]*dims[2]
pis.hat <- matrix(0,dims[1],dims[2])
Lfdr<-locfdr(x.2D, bre = 120, df = 7, pct = 0, pct0 = 1/4, nulltype = 0,
type =0, plot = 0, main = " ", sw = 0)$fdr
for (i in 1:dims[1]) {
for (j in 1:dims[2]) {
s<-c(i, j)
dis.vec<-disvec_2Dfunc(dims, s)
kht<-dnorm(dis.vec, 0, h)
kht[which(dis.vec>h)]<-0
pis.hat[i,j]<-sum(kht*(1-Lfdr))/sum(kht)
}
}
return(c(pis.hat))
}
dims<-c(80, 80)
m<-dims[1]*dims[2]
theta<-matrix(rep(0, m), dims[1], dims[2])
pis<-matrix(0, dims[1], dims[2])
mu0.vec<-c(1.5,1.75,2)
q<-0.1
np<-length(mu0.vec)
nrep<-100
#Two different signal area shapes
pisA.func<-function(i, j)
{
if(sqrt((i-20)^2+(j-20)^2<=10^2))
y <- 0.6
else if(i>50 && i<=65 && j>50 && j<=65)
y <- 0.6
else
y <- 0.01
return(y)
}
mu0=mu0.vec[1]
for(i1 in 1:dims[1])
{
for (j1 in 1:dims[2])
{
pis[i1,j1] = pisA.func(i1,j1)
theta[i1,j1]<-rbinom(1, 1, pis[i1,j1])
}
}
theta.vec<-c(theta)
pis.vec <- c(pis)
pii<-sum(theta.vec)/m
x0<-rnorm(m, mean=0, sd=1)
x1<-rnorm(m, mean=mu0, sd=1)
x.vec<-(1-theta.vec)*x0+theta.vec*x1
x.2D<-matrix(x.vec, dims[1], dims[2])
pis.hat <- pis_2Dfunc(x.2D,h=50)
disvec_3Dfunc<-function(dims, s)
{
# disvec computes the distances of all points on a m1 times m2 spatial domain to a point s
## Arguments:
# dims=c(d1, d2, d3): the dimensions
# s=c(s1, s2, s3): a spatial point
## Values:
# a vector of distances
m<-dims[1]*dims[2]*dims[3]
dis.vec<-rep(0, m)
loc<-0
for(k in 1:dims[3])
{
for (j in 1:dims[2])
{
for(i in 1:dims[1])
{
loc<-loc+1
dis.vec[loc]<-sqrt((i-s[1])^2+(j-s[2])^2+(k-s[3])^2)
}
}
}
return(dis.vec)
}
dims<-c(20, 20, 25)
m<-dims[1]*dims[2]*dims[3]
theta<-array(rep(0, m), dims) # true states of nature
pis<-array(rep(0.01, m), dims) # true states of nature
pi0=0.6
mu0.vec<-c(1.5,1.75,2)
np<-length(mu0.vec)
locs<-1:m
isA.func<-function(i,j,k)
{
# decide whether (i,j,k) is in the cubic A
if(i>5 && i<=15 && j>10 && j<=20 && k>10 && k<=20)
y<-1
else
y<-0
return(y)
}
mu0<-mu0.vec[1]
for(i1 in 1:dims[1])
{
for (j1 in 1:dims[2])
{
for (k1 in 1:dims[3])
{
if (isA.func(i1,j1,k1))
{
theta[i1,j1,k1]<-rbinom(1, 1, pi0)
pis[i1,j1,k1] = pi0
}
else
theta[i1,j1,k1]<-rbinom(1, 1, 0.01)
}
}
}
theta.vec<-c(theta)
pis.vec <- c(pis)
pii<-sum(theta.vec)/m
x0<-rnorm(m, mean=0, sd=1)
x1<-rnorm(m, mean=mu0, sd=1)
x.vec<-(1-theta.vec)*x0+theta.vec*x1
x<-array(x.vec, dims)
pis.hat <- pis_3Dfunc(x.3D,h=50)
pis_3Dfunc<- function(x.3D,h)
{
#x: 3D array
#h: the bandwidth of kernel functions
#pis.hat: local sparsity level
dims<-dim(x.3D)
m<-dims[1]*dims[2]*dims[3]
pis.hat <- array(0,dims)
Lfdr<-locfdr(x.3D, bre = 120, df = 7, pct = 0, pct0 = 1/4, nulltype = 0,
type =0, plot = 0, main = " ", sw = 0)$fdr
for (i in 1:dims[1])
{
for (j in 1:dims[2])
{
for (k in 1:dims[3])
{
s<-c(i,j,k)
dis.vec<-disvec_3Dfunc(dims, s)
kht<-dnorm(dis.vec, 0, h)
kht[which(dis.vec>h)]<-0
pis.hat[i,j,k]<-sum(kht*(1-Lfdr))/sum(kht)
}
}
}
c(pis.hat)
}
pis.hat <- pis_3Dfunc(x.3D,h=50)
x.3D<-array(x.vec, dims)
pis.hat <- pis_3Dfunc(x.3D,h=50)
